
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OverReact 

// ordc (OverReact connected component (just boilerplate for connection, not whole component))

import 'package:over_react/over_react_redux.dart';

import '../model/app_state.dart';

UiFactory<$CLASS_NAME$Props> Connected$CLASS_NAME$ =
    connect<AppState, $CLASS_NAME$Props>(mapStateToProps: (state) {
  
  return $CLASS_NAME$();
})($CLASS_NAME$);






////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// built_value

settings for calculated fields:
FIELD_NAME =         snakeCase(FIELD_TYPE)
LOWER_CLASS_NAME =   decapitalize(CLASS_NAME)


// bvsan (built value Action with serialization, no data
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Action, Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  /************************ begin BuiltValue boilerplate ************************/
  factory $CLASS_NAME$() => _$$$CLASS_NAME$;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
}


// bvsa (built value Action with serialization, and support for one field initially
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Action, Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  $FIELD_TYPE$ get $FIELD_NAME$;
  
  /************************ begin BuiltValue boilerplate ************************/
  factory $CLASS_NAME$({$FIELD_TYPE$ $FIELD_NAME$}) = _$$$CLASS_NAME$._;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
}



// bvs (built value with serialization, and support for one field initially)
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  
  factory $CLASS_NAME$({$FIELD_TYPE$ $FIELD_NAME$}) = _$$$CLASS_NAME$._;

  factory $CLASS_NAME$.from([void Function($CLASS_NAME$Builder) updates]) = _$$$CLASS_NAME$;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
  /************************ end BuiltValue boilerplate ************************/

  $FIELD_TYPE$ get $FIELD_NAME$;
  
}



// bv (built value)
import 'package:built_value/built_value.dart';

part '$filename$.g.dart';

abstract class $CLASS_NAME$ implements Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  $CLASS_NAME$._();

  factory $CLASS_NAME$([void Function($CLASS_NAME$Builder) updates]) = _$$$CLASS_NAME$;  
  /************************ end BuiltValue boilerplate ************************/
}





//////////////////////////////////////////////////////////////////////////////
// old below here



// bvsa (built value Action with serialization, and support for one field initially
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Action, Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  $FIELD_TYPE$ get $FIELD_NAME$;
  
  /************************ begin BuiltValue boilerplate ************************/
  factory $CLASS_NAME$($FIELD_TYPE$ $FIELD_NAME$) => $CLASS_NAME$.from((b) => b..$FIELD_NAME$ = $FIELD_NAME$);

  factory $CLASS_NAME$.from([void Function($CLASS_NAME$Builder) updates]) = _$$$CLASS_NAME$;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
}



// bvs (built value with serialization, and support for one field initially)
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  
  factory $CLASS_NAME$($FIELD_TYPE$ $FIELD_NAME$) => $CLASS_NAME$.from((b) => b..$FIELD_NAME$ = $FIELD_NAME$);

  factory $CLASS_NAME$.from([void Function($CLASS_NAME$Builder) updates]) = _$$$CLASS_NAME$;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
  /************************ end BuiltValue boilerplate ************************/

  $FIELD_TYPE$ get $FIELD_NAME$;
  
}


// bvsan (built value Action with serialization, no data
abstract class $CLASS_NAME$ 
    with BuiltJsonSerializable 
    implements Action, Built<$CLASS_NAME$, $CLASS_NAME$Builder> {
  /************************ begin BuiltValue boilerplate ************************/
  factory $CLASS_NAME$() => $CLASS_NAME$.from((b) => b);

  factory $CLASS_NAME$.from([void Function($CLASS_NAME$Builder) updates]) = _$$$CLASS_NAME$;

  $CLASS_NAME$._();
  
  static Serializer<$CLASS_NAME$> get serializer => _$$$LOWER_CLASS_NAME$Serializer; 
}
